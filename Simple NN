# -*- coding: utf-8 -*-
"""
Created on Mon Apr  8 19:12:48 2019

@author: emp9123891
"""

import numpy as np
import math

class NN:
    def __init__(self,x,y):
        self.input      = x
        self.weights1   = np.random.rand(self.input.shape[1],4) 
        self.weights2   = np.random.rand(4,1)                 
        self.y          = y
        self.output     = np.zeros(self.y.shape)

    #calculation for feed forward
    def FF(self):
        sigm = lambda x: 1/(1+math.exp(-x))
        sigmoid = np.vectorize(sigm)
        
        self.layer1 = sigmoid(np.dot(self.input, self.weights1))
        self.output = sigmoid(np.dot(self.layer1, self.weights2))
	
    #calculate back propagation using cost function and gradient decent
    def BP(self):
        # application of the chain rule to find derivative of the loss function with respect to weights2 and weights1
        sigm = lambda x: x*(1-x)       
        sigmoid_derivative = np.vectorize(sigm)
        
        d_weights2 = np.dot(self.layer1.T, (2*(self.y - self.output) * sigmoid_derivative(self.output)))
        d_weights1 = np.dot(self.input.T,  (np.dot(2*(self.y - self.output) * sigmoid_derivative(self.output), self.weights2.T) * sigmoid_derivative(self.layer1)))

        # update the weights with the derivative (slope) of the loss function
        self.weights1 += d_weights1
        self.weights2 += d_weights2

#training

x = np.array([[0,0,1],[0,1,1],[1,0,1],[1,1,1]])
y = np.array([[0],[1],[1],[0]])

myNN = NN(x,y)

for i in range(1500):
    myNN.FF()
    myNN.BP()
print(myNN.output)

'''
output:
[[0.02138548]
 [0.97028806]
 [0.96962606]
 [0.02661224]]
'''
